<launch>


  <!-- TESTRIG LAUNCH CODE -->

  <node name="motor_controller_node" pkg="testrig" type="motor_controller_node" output="screen" />

  <node name="turn_radius_node" pkg="testrig" type="turn_radius_node.py" output="screen" />

  <node name="action_decider_node" pkg="testrig" type="action_decider_node.py" output="screen" />

  <!--<node name="pose_calc_node" pkg="testrig" type="pose_calc.py" output="screen" /> -->
  <node name="quaternion_to_euler_node" pkg="testrig" type="quaternion_to_euler.py" output="screen" />
  <node name="coord_transform_map_to_rig_node" pkg="testrig" type="coord_transform_map_to_rig.py" output="screen" />
  <node name="coordinate_list" pkg="testrig" type="coordinate_list.py" output="screen" />

  <!-- node name="extract_map_info_node" pkg="testrig" type="extract_map_info.py" output="screen" / -->

  <node name="arduino_motor_node" pkg="rosserial_python" type="serial_node.py" output="screen">
	<param name="port" value="/dev/ttyACM0" />
	<param name="baud" value="57600" />
  </node>

  <node name="waist_twist_control" pkg="rosserial_python" type="serial_node.py" output="screen" >
	<param name ="port" value="/dev/ttyACM1" />
	<param name ="baud" value="57600"/>
  </node>

  <node name="pendulum_arm_control" pkg="rosserial_python" type="serial_node.py" output="screen" >
	<param name = "port" value = "/dev/ttyACM2" />
	<param name = "baud" value = "57600"/>
  </node>



  <!-- ZED STEREO CAMERA LAUNCH CODE -->

    <arg name="svo_file"             default="" /> <!-- <arg name="svo_file" default="path/to/svo/file.svo"> -->
    <arg name="stream"               default="" /> <!-- <arg name="stream" default="<ip_address>:<port>"> -->

    <arg name="node_name"            default="zed_node" />
    <arg name="camera_model"         default="zed" /> <!-- 'zed' or 'zedm' -->
    <arg name="publish_urdf"         default="true" />

    <group ns="zed">
        <include file="$(find zed_wrapper)/launch/zed_camera.launch">
            <arg name="svo_file"            value="$(arg svo_file)" />
            <arg name="stream"              value="$(arg stream)" />
            <arg name="node_name"           value="$(arg node_name)" />
            <arg name="camera_model"        value="$(arg camera_model)" />
            <arg name="publish_urdf"        value="$(arg publish_urdf)" />
        </include>
    </group>


  <!-- VELODYNE LIDAR LAUNCH CODE -->

  <!-- declare arguments with default values -->
  <arg name="calibration" default="$(find velodyne_pointcloud)/params/VLP16db.yaml"/>
  <arg name="device_ip" default="" />
  <arg name="frame_id" default="velodyne" />
  <arg name="manager" default="$(arg frame_id)_nodelet_manager" />
  <arg name="max_range" default="130.0" />
  <arg name="min_range" default="0.4" />
  <arg name="pcap" default="" />
  <arg name="port" default="2368" />
  <arg name="read_fast" default="false" />
  <arg name="read_once" default="false" />
  <arg name="repeat_delay" default="0.0" />
  <arg name="rpm" default="600.0" />
  <arg name="gps_time" default="false" />
  <arg name="cut_angle" default="-0.01" />
  <arg name="timestamp_first_packet" default="false" />
  <arg name="laserscan_ring" default="-1" />
  <arg name="laserscan_resolution" default="0.007" />
  <arg name="organize_cloud" default="false" />

  <!-- start nodelet manager and driver nodelets -->
  <include file="$(find velodyne_driver)/launch/nodelet_manager.launch">
    <arg name="device_ip" value="$(arg device_ip)"/>
    <arg name="frame_id" value="$(arg frame_id)"/>
    <arg name="manager" value="$(arg manager)" />
    <arg name="model" value="VLP16"/>
    <arg name="pcap" value="$(arg pcap)"/>
    <arg name="port" value="$(arg port)"/>
    <arg name="read_fast" value="$(arg read_fast)"/>
    <arg name="read_once" value="$(arg read_once)"/>
    <arg name="repeat_delay" value="$(arg repeat_delay)"/>
    <arg name="rpm" value="$(arg rpm)"/>
    <arg name="gps_time" value="$(arg gps_time)"/>
    <arg name="cut_angle" value="$(arg cut_angle)"/>
    <arg name="timestamp_first_packet" value="$(arg timestamp_first_packet)"/>
  </include>

  <!-- start cloud nodelet -->
  <include file="$(find velodyne_pointcloud)/launch/cloud_nodelet.launch">
    <arg name="model" value="VLP16"/>
    <arg name="calibration" value="$(arg calibration)"/>
    <arg name="manager" value="$(arg manager)" />
    <arg name="max_range" value="$(arg max_range)"/>
    <arg name="min_range" value="$(arg min_range)"/>
    <arg name="organize_cloud" value="$(arg organize_cloud)"/>
  </include>

  <!-- start laserscan nodelet -->
  <include file="$(find velodyne_pointcloud)/launch/laserscan_nodelet.launch">
    <arg name="manager" value="$(arg manager)" />
    <arg name="ring" value="$(arg laserscan_ring)"/>
    <arg name="resolution" value="$(arg laserscan_resolution)"/>
  </include>

<!-- MAPPING CODE -->
	<!-- Transforms --> 
	<node pkg="tf" type="static_transform_publisher" name="velodyne_link" args="0 0.13 0.75 1.57 0 0 base_link1 velodyne 10" />

	<node pkg="tf" type="static_transform_publisher" name="zed_link" args="0 0.44 0.65 0 0 0 base_link1 zed 10" />

	<node pkg="topic_tools" type="relay" name="relay_zed" args="/zed/zed_node/point_cloud/cloud_registered /joint_cloud" />
	<node pkg="topic_tools" type="relay" name="relay_velodyne" args="/velodyne_points /joint_cloud" />
	<!-- Topology --> 
	  <!-- <rosparam command="load" file="$(find grid_map_demos)/config/octomap_to_gridmap_demo.yaml" /> -->

  	<!-- Load the octomap -->
	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server" output="screen">
		<param name="resolution" value="0.4" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="map" />

		<!-- modify latch for performance increase -->
		<param name="latch" type="bool" value="false" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="20.0" />
				
		<!-- maximum height to integrate (speedup!) -->
		<param name="occupancy_min_z" value="0" />
		<param name="occupancy_max_z" value="2" />

		<!-- data source to integrate (PointCloud2) -->
		<!-- <remap from="/cloud_in" to="/voxel_grid/output" /> STOG voxel_grid HÃ„R-->
		<!-- <remap from="/cloud_in" to="zed/zed_node/point_cloud/cloud_registered" /> --> 
		<!-- <remap from="/cloud_in" to="/velodyne_points" /> -->
		<remap from="/cloud_in" to="/voxel_grid/output" /> 

	</node>

  	<!-- Launch the octomap conversion node -->
  	<!-- <node pkg="grid_map_demos" type="octomap_to_gridmap_demo" name="octomap_to_gridmap_demo" output="screen" /> -->

  	<!-- Launch the grid map visualizer -->
  	<node pkg="grid_map_visualization" type="grid_map_visualization" name="grid_map_visualization" output="screen" />
	
	<!-- Launch the octomap reset node 
  	<node pkg="octo_reset" type="octomap_reset_node" name="octomap_reset_node" output="screen" /> -->

	<node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="screen" />
	
	<!-- Run a VoxelGrid filter to clean NaNs and downsample the data -->
	<node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid pcl_manager" output="screen">
	  <remap from="~input" to="/joint_cloud" />
	    <param name="filter_field_name" value="z" />
	    <param name="filter_limit_min" value="0" />
	    <param name="filter_limit_max" value="5" />
	    <param name="filter_limit_negative" value="False" />
	    <param name="leaf_size" value="0.2" />
	</node>



<!-- MODEL IN RVIZ -->
  <!--<param name ="/use_sim_time" value="true"/-->
  <arg name="model" default="$(find testrig)/urdf/rig.urdf.xacro"/>
  <arg name="use_gui" type="bool" default="false" />
  
  <rosparam file="$(find testrig)/config/joints.yaml" command="load" />

 <node name="rig_controller_manager" pkg="controller_manager" type="spawner" respawn="false"    output="screen" ns="testrig" args="/joint_state_controller /joint_position_controller /joint_position_controller2"/>

  <param name="robot_description" command="$(find xacro)/xacro.py $(arg model)"/>


  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" respawn="false" output="screen">
    <param name="publish_frequency" type="double" value="50.0" />
    <param name="tf_prefix" value=""/>
    <remap from="/joint_states" to="/testrig/joint_states" />
  </node>
  
  <node pkg="tf" type="static_transform_publisher" name="map_link" args="0 0 0 -1.57 0 0 map base_link1 10" />
  <node pkg="tf" type="static_transform_publisher" name="map_base_footprint" args="0 0 0 0 0 0 map base_footprint 10" />

</launch>
